package tree

type node struct {
	name     string
	parent   *node
	children []*node
	state    NodeState
}

func (n node) Parent() Node {
	if n.parent == nil {
		return nil
	}
	return n.parent
}

func (n node) Name() string {
	return n.name
}

func (n node) Prefix() string {
	return "-rwxrwxrwx"
}

func (n node) State() NodeState {
	return n.state
}

func (n *node) SetState(st NodeState) {
	n.state = st
}

func (n node) Children() Nodes {
	nodes := make(Nodes, len(n.children))
	for i, nn := range n.children {
		nodes[i] = nn
	}
	return nodes
}

// shorthand functions for setting the parent
func p(p *node) func(*node) {
	return func(nn *node) {
		nn.parent = p
	}
}

// shorthand functions for setting the state
func st(st NodeState) func(*node) {
	return func(nn *node) {
		nn.state |= st
	}
}

// shorthand functions for setting the children
func c(c ...*node) func(*node) {
	return func(nn *node) {
		for i, nnn := range c {
			if i == len(c)-1 {
				nnn.state |= NodeLastChild
			}
			nnn.parent = nn
			nn.children = append(nn.children, nnn)
		}
	}
}

// shorthand functions for creating a treenode
func tn(name string, fns ...func(*node)) *node {
	n := &node{name: name}
	for _, fn := range fns {
		fn(n)
	}
	if len(n.children) > 0 {
		n.state |= NodeCollapsible
	}
	return n
}

// We're building this mock tree:
// 0  1  2  3  4  <- these are the positions for tree Symbols
// └─ tmp
//    ├─ example1
//    └─ test
//       ├─ example
//       │  ├─ file2
//       │  ├─ file4
//       │  └─ lastchild
//       │     └─ file
//       ├─ file1
//       ├─ file3
//       └─ file5
//
// Generated by the following code:
//
// m := New(Nodes{treeOne})
// m.SetWidth(26)
// m.SetHeight(12)
// m.render()

var treeOne = tn("tmp",
	st(NodeLastChild),
	c(
		tn("example1"),
		tn("test",
			c(
				tn("example",
					c(
						tn("file2"),
						tn("file4"),
						tn("lastchild", st(NodeLastChild), c(tn("file", st(NodeLastChild)))),
					),
				),
				tn("file1"),
				tn("file3"),
				tn("file5", st(NodeLastChild)),
			),
		),
	),
)

// TODO: good luck with this! :)
